#!/bin/bash
# bash required to use `declare`

# URL to Project Euler's website
URL_EULER="https://projecteuler.net"

# HTML file to store Euler's response for debugging purposes
FILE_HTML="response.html"

# File with headers from a web browser with a valid session cookie
FILE_HEADERS="headers.txt"

# File with cookies managed by functions from this file
FILE_COOKIES="cookies"

# PNG file to store Euler's captcha in
FILE_CAPTCHA="captcha.png"

# File to pass login and password to PE
FILE_CREDENTIALS="credentials.txt"

# Captcha as jpg for jp2a
FILE_CAPTCHAJPG="${FILE_CAPTCHA%.png}.jpg"


checkdep() {
	if ! hash $1 2>/dev/null; then
		echo "$1 not installed!"
		exit 1
	fi
}

# Check dependencies
checkdep jp2a
checkdep convert
checkdep curl

# Clean temporary / debug files
clean() {
	# -f to suppress file doesn't exist warnings
	rm -f "$FILE_CAPTCHA" "$FILE_CAPTCHAJPG" "$FILE_HTML"
}

# I just need it separated; login() has to have it explicitly
view_captcha() {
	convert "$FILE_CAPTCHA" "$FILE_CAPTCHAJPG"
	jp2a "$FILE_CAPTCHAJPG" -z --color --chars='..00xx@@'
}

# Fetch captcha. PE server keeps track of ids of captcha you've requested and
# expects you to submit the last one, so use this function carefully
get_captcha() {
	curl -s "$URL_EULER/captcha/show_captcha.php?" \
		-H @"$FILE_HEADERS" --cookie "$FILE_COOKIES" -o "$FILE_CAPTCHA"

	view_captcha
}


# Download and show HTML for the account tab for debugging purposes
account() {
	curl "$URL_EULER/account" \
	        --compressed -sH @"$FILE_HEADERS" --cookie "$FILE_COOKIES" \
		| vim -
}

# Download a question from Project Euler
prob() {
	if [[ $# -eq 0 ]] ;then
		echo "usage: euler prob <problem-number>"
	fi

	curl "$URL_EULER/problem=$1" -s \
		| tee $FILE_HTML \
	        | sed -n '/<div class="problem_content"/,/<\/div>/p' \
		| sed '1d; $d' \
		| sed 's/<[^>]*>//g'
}

# Get a random token to submit a solution to a problem
token() {
	result=$(curl "$URL_EULER/problem=$1" \
		--compressed -s -H @"$FILE_HEADERS" --cookie "$FILE_COOKIES" \
		| sed 's/.*name=\"submit_token\" value=\"\([0-9a-z]*\)\".*/\1/p' -n)
	
	if [ -z "$result" ]
	then
	        echo "Either you're logged out or have already solved this problem"
		exit 1
	else
		echo "$result"
		exit 0
	fi
}

# Login to Project Euler using credentials from a file
login() {
	if [ ! -f $FILE_CREDENTIALS ]; then
		echo "No credentials file $FILE_CREDENTIALS!"
		exit 1
	fi
	user="$(head -1 $FILE_CREDENTIALS | head -c -1)"
	pass="$(tail -1 $FILE_CREDENTIALS | head -c -1)"

	curl "$URL_EULER/captcha/show_captcha.php?" \
	        --cookie-jar "$FILE_COOKIES" -o "$FILE_CAPTCHA" -s
	view_captcha
	read -p "Enter captcha:" cap

	curl "$URL_EULER/sign_in" \
	        --cookie "$FILE_COOKIES"  -L -o "$FILE_HTML" -s \
		-d "username=$user&password=$pass&captcha=$cap&sign_in=Sign+In"

	if grep -q "Sign in successful" "$FILE_HTML"; then
	        echo "Sign in successful"
		exit 0
	else
		echo "Something went wrong. Look at the content of $FILE_HTML"
		exit 1
	fi
}

# Submit a solution to a problem
submit() {
	if [ ! -f $FILE_HEADERS ]; then
		echo "No headers file $FILE_HEADERS!"
		exit 1
	elif [ ! -f $FILE_COOKIES ]; then
		echo "No cookies file $FILE_COOKIES!"
		exit 1
	fi

	read -p "Enter problem number:" prob
	tok=$(token $prob)
	if [ $? -eq 1 ]; then
		echo "Unable to get a submit token"
		exit 1
	fi

	read -p "Enter answer:" ans

	get_captcha
	read -p "Enter captcha:" cap
	rm "$FILE_CAPTCHA"


	data="guess_$prob=$ans&submit_token=$tok&captcha=$cap"

	curl "$URL_EULER/problem=$prob" \
		-H @"$FILE_HEADERS" --cookie "$FILE_COOKIES" \
		-d "$data" \
		--compressed -Ls -o "$FILE_HTML"


	if grep -q "<p>Sorry, but the answer you gave appears to be incorrect.</p>" "$FILE_HTML"; then
		echo "Incorrect!"
		exit 1
	elif grep -q "<p>Congratulations, the answer you gave to problem $prob is correct.</p>" "$FILE_HTML"; then
		echo "Correct!"
		exit 0
	elif grep -q "An error occurred whilst trying to submit your guess<br>Please try again" "$FILE_HTML"; then
		echo "An error occured :("
		exit 1
	elif grep -q '<div id="message" class="noprint">The confirmation code you entered was not valid</div>' "$FILE_HTML"; then
		echo "Invalid captcha"
		exit 1
	else
		echo "Unknown error. Check $FILE_HTML and look what's going on"
		exit 1
	fi
}

if [[ $# -eq 0 ]] ;then
	echo "usage: euler <command>"
	echo ""
	echo "these are acceptable commands:"
	echo "  clean - remove captchas and a debugging html doc $FILE_HTML"
	echo "  get_captcha - fetch captcha and show it as an ASCII-art image"
	echo "  account - download and show the Account tab to check if you're logged in"
	echo "  prob - show question"
	echo "  login - login to Project Euler using credentials from $FILE_CREDENTIALS file"
	echo "  submit - submit a solution to a problem"
	exit 1
fi

if declare -f "${1}__$2" >/dev/null; then
	func="${1}__$2"
	shift; shift    # pop $1 and $2 off the argument list
	"$func" "$@"    # invoke our named function w/ all remaining arguments
elif declare -f "$1" >/dev/null 2>&1; then
	"$@"
else
	echo "Neither function $1 nor subcommand ${1}__$2 recognized" >&2
	exit 1
fi

